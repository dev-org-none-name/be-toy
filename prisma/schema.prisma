generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Role {
  USER
  Recruiter
}

enum State {
  STANDBY
  FAILURE
  ACCEPT
}

model User {
  role     Role       @default(USER)
  id       Int        @id @default(autoincrement())
  username String     @unique
  password String
  email    String     @unique
  phone    String
  avatar   String?
  // Link
  company  Company?
  Token    Token[]
  // Reference
  Resume   Resume[]
  Bookmark Bookmark[]
}

model Token {
  id          String   @id @unique @default(uuid())
  hashedToken String
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

// ---------------------

model Company {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String         @db.MediumText
  // Link
  jobs          Job[]
  companyPhotos CompanyPhoto[]
  // Reference
  userId        Int            @unique
  user          User           @relation(fields: [userId], references: [id])
}

model CompanyPhoto {
  id        String  @id @unique @default(uuid())
  url       String
  // Reference
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
}

// ---------------------

model Job {
  id       Int      @id @default(autoincrement())
  title    String
  desc     String   @db.MediumText
  createAt DateTime @default(now())
  startAt  DateTime
  endAt    DateTime
  isClosed Boolean

  // Link
  jobPhotos JobPhoto[]
  tags      Tag[]
  skills    Skill[]
  resume    Resume[]
  Bookmark  Bookmark[]
  // Reference

  Company   Company @relation(fields: [companyId], references: [id])
  companyId Int
}

model Resume {
  id     Int   @id @default(autoincrement())
  state  State @default(STANDBY)
  // Reference
  job    Job   @relation(fields: [jobId], references: [id])
  user   User  @relation(fields: [userId], references: [id])
  jobId  Int
  userId Int
}

model Bookmark {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job    Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId Int
  jobId  Int
}

model JobPhoto {
  id    String @id @unique @default(uuid())
  url   String
  // Reference
  jobId Int?
  job   Job?   @relation(fields: [jobId], references: [id])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  // Reference
  jobId Int?
  job   Job?   @relation(fields: [jobId], references: [id])
}

model Skill {
  id    Int    @id @default(autoincrement())
  name  String @unique
  // Reference
  jobId Int?
  Job   Job?   @relation(fields: [jobId], references: [id])
}
